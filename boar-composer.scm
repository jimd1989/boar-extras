(import (chicken string) (srfi-1))
(define-syntax λ (syntax-rules () ((_ . α) (lambda . α))))
(define-syntax ∃ (syntax-rules () ((_ . α) (let* . α))))
(define-syntax ? (syntax-rules () ((_ . α) (if . α))))
(define-syntax ← (syntax-rules (▽)
 ((_ (▽ α ...) ω ...) (begin (define α ω) ...))
 ((_ ((α ω ...) ...)) (begin (define α ω ...) ...))
 ((_ . α) (define . α))))
(← ((◇ conc) (∀ map) (∘ compose) ($ apply) (I identity) (∈ assoc) (⊖ flip)))
(← ((↑ car) (↓ cdr) (⇒ foldr) (⇐ foldl) (⊂ cons) (≡ equal?) (∅ '()) (∅? null?)))
(← ((⌽ reverse) (⇒? filter) (ρ make-list) (xs→s (⊖ string-intersperse))))
(← (⊃ α ω) `(,@ω ,α))
(← (K α) (λ (ω) α))
(← (⊥ f . α) (λ (ω) ($ f `(,@α , ω))))
(← (?? p f g) (λ (α) (? (p α) (f α) (g α))))
(← (∈∈ α ω) (↑ (↓ (∈ α ω))))
(← (∈$ α f ω) (∃ ((A (↑ ω)) (Ω (↓ ω))) (? (≡ α A) `(,α ,($ f Ω)) ω)))
(← (∈⇒ α f ω) (⇒ (λ (x acc) (⊂ (∈$ α f x) acc)) ∅ ω))
(← (toggle α ω) (∀ (⊥ ◇ α) ω))
(← (ln α ω) (xs→s ";" `(,@(toggle 'o α) ,@(toggle 'n ω))))
(← (line α ω)
 (? (∅? ω) (∈⇒ 'A (⊥ ⊃ "") α) (∈⇒ 'Ω (K ω) (∈⇒ 'A (⊥ ⊃ (ln (∈∈ 'Ω α) ω)) α))))
(← (final α) (↑ (⇒? (∘ not ∅?) (⌽ α))))
(← (lines α) (∈∈ 'A (⇐ line `((A ()) (Ω ,(final α))) α)))
(← (score n α) (∃ ((ns ($ ◇ (ρ n "\n")))) (◇ (xs→s ns (lines α)) ns)))
(← (on α) (ln ∅ α))
(← (off α) (ln α ∅))
(← (▽ C Db D Eb E F Gb G Ab A Bb B) 0 1 2 3 4 5 6 7 8 9 10 11)
(define-syntax note (syntax-rules () 
 ((_ α n) (eval `(define ,(string->symbol (◇ (quote α) n)) ,(+ α (* 12 n)))))))
(define-syntax notes (syntax-rules ()
 ((_ () n ...) ∅)
 ((_ (α ω ...) n ...) (begin (note α n) ... (notes (ω ...) n ...)))))
(notes (C Db D Eb E F Gb G Ab A Bb B) 0 1 2 3 4 5 6 7 8 9 10)
(← (&&& . fs) (λ (α) (∀ (λ (f) (f α)) fs)))
(← (chord . ns) ($ &&& (∀ (λ (n) (⊥ + n)) ns)))
(← (mj α) ((chord 0 4 7) α))
(← (mn α) ((chord 0 3 7) α))
(← (mj7 α) ((chord 0 4 7 11) α))
(← (mn7 α) ((chord 0 3 7 11) α))
(← (arp α) (∀ (?? list? I list) α))
(∃ ((α (read))) (display (score (∈∈ 'steps α) (eval (∈∈ 'notes α)))))
